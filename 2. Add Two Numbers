You are given two non-empty linked lists representing two non-negative integers. 
The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.
--------------------------------------------
Read numbers digit by digit,
sum them with carry.
--------------------------------------------


// c version 1 20ms
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode *result = (struct ListNode *)malloc(sizeof(struct ListNode));
    struct ListNode *victim;
    struct ListNode *victimA = l1;
    struct ListNode *victimB = l2;
    int tempA,tempB,digit,carry = 0,count = 0;
    
    while(victimA!=NULL || victimB!=NULL){
        if(victimA==NULL)   tempA=0;
        else{
            tempA=victimA->val;
            victimA=victimA->next;
        }
        if(victimB==NULL)   tempB=0;
        else{
            tempB=victimB->val;
            victimB=victimB->next;
        } 
        if(tempA+tempB+carry>9){
            digit = tempA+tempB+carry-10;
            carry = 1;
        }
        else{
            digit = tempA+tempB+carry;
            carry = 0;
        }

        if(count==0){
            result->val = digit;
            victim = result;
            ++count;
        }
        else{
            struct ListNode *temp = (struct ListNode *)malloc(sizeof(struct ListNode));  
            temp->val = digit;
            result->next = temp;
            result = result->next;
        }          
    }
    if(carry){
        struct ListNode *temp = (struct ListNode *)malloc(sizeof(struct ListNode));  
        temp->val = carry;
        result->next = temp;
        result = result->next;
    }
    result->next = NULL;
    return victim;
}

// c++ version 1 28ms
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *result = new ListNode(0);
        ListNode *victim;
        ListNode *victimA = l1;
        ListNode *victimB = l2;
        int tempA,tempB,digit,carry = 0,count = 0;
    
        while(victimA!=NULL || victimB!=NULL){
            if(victimA==NULL)   tempA=0;
            else{
                tempA=victimA->val;
                victimA=victimA->next;
            }
            if(victimB==NULL)   tempB=0;
            else{
                tempB=victimB->val;
                victimB=victimB->next;
            } 
            if(tempA+tempB+carry>9){
                digit = tempA+tempB+carry-10;
                carry = 1;
            }
            else{
                digit = tempA+tempB+carry;
                carry = 0;
            }

            if(count==0){
                result->val = digit;
                victim = result;
                ++count;
            }
            else{
                ListNode *temp = new ListNode(0); 
                temp->val = digit;
                result->next = temp;
                result = result->next;
            }          
        }
        if(carry){
            ListNode *temp = new ListNode(0); 
            temp->val = carry;
            result->next = temp;
            result = result->next;
        }
        result->next = NULL;
        return victim;
        }
};

// java version 1 27ms
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
    ListNode dummyHead = new ListNode(0);
    ListNode p = l1, q = l2, curr = dummyHead;
    int carry = 0;
    while (p != null || q != null) {
        int x = (p != null) ? p.val : 0;
        int y = (q != null) ? q.val : 0;
        int sum = carry + x + y;
        carry = sum / 10;
        curr.next = new ListNode(sum % 10);
        curr = curr.next;
        if (p != null) p = p.next;
        if (q != null) q = q.next;
    }
    if (carry > 0) {
        curr.next = new ListNode(carry);
    }
    return dummyHead.next;
}
}

// python version 1 68ms
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        l3 = None
        a = 0
        while l1 or l2 or a:
            if l1:
                a += l1.val
                l1 = l1.next
                
            if l2:
                a += l2.val
                l2 = l2.next
                
            if l3:
                l3.next = ListNode(a%10)
                l3 = l3.next
            else:
                l0 =  ListNode(a%10)
                l3 = l0

            a = a//10

        return l0
