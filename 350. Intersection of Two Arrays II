Given two arrays, write a function to compute their intersection.

Example 1:
Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2,2]

Example 2:
Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [4,9]
Note:

Each element in the result should appear as many times as it shows in both arrays.
The result can be in any order.
Follow up:

What if the given array is already sorted? How would you optimize your algorithm?
What if nums1's size is small compared to nums2's size? Which algorithm is better?
What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?
-------------------------------------------------------

// c version 1 8ms

/**
 * Return an array of size *returnSize.
 * Note: The returned array must be malloced, assume caller calls free().
 */
void Merge(int a[], int left, int mid, int right){
    int len = right - left + 1;        //    数组的长度
    int *temp = (int*)malloc(len);       // 分配个临时数组
    int k = 0;
    int i = left;                   // 前一数组的起始元素
    int j = mid + 1;                // 后一数组的起始元素
    while (i <= mid && j <= right){
        //    选择较小的存入临时数组
        temp[k++] = a[i] <= a[j] ? a[i++] : a[j++];  
    }
    while (i <= mid){
        temp[k++] = a[i++];
    }
    while (j <= right){
        temp[k++] = a[j++];
    }
    for (int k = 0; k < len; k++){
        a[left++] = temp[k];
    }
}

// 递归实现的归并排序
void MergeSort(int a[], int left, int right){
    if (left == right)    
        return;
    int mid = (left + right) / 2;
    MergeSort(a, left, mid);
    MergeSort(a, mid + 1, right);
    Merge(a, left, mid, right);
}

int* intersect(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize) {
    int *result = (int*)malloc(sizeof(int));
    // check whether sorted
    for(int i = 0; i < nums1Size - 1; ++i){
        if(nums1[i] > nums1[i+1]){
            MergeSort(nums1, 0, nums1Size - 1);
            break;
        }
    }
    for(int i = 0; i < nums2Size - 1; ++i){
        if(nums2[i] > nums2[i+1]){
            MergeSort(nums2, 0, nums2Size - 1);
            break;
        }
    }
    // ptr1 always points to the larger array
    int *beginPtr1 = nums1Size > nums2Size ? nums1 : nums2;
    int *beginPtr2 = nums1Size > nums2Size ? nums2 : nums1;
    for(int i = 0, j = 0; i < nums1Size || j < nums2Size;){
        if(beginPtr1[i] == beginPtr2[j]){
            result[j] = beginPtr1[i];
            ++i; ++j;
        }
        else if(beginPtr1[i] > beginPtr2[j]){
            ++j;
            if(j == nums2Size){
                *returnSize = j;
                break;
            }  
        }
        else{
            ++i;
            if(i == nums1Size){
                *returnSize = j + 1;
                break;
            }
        }
    }
    return result;
}
