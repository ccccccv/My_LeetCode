// c version 1
double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size) {
    int all[nums1Size + nums2Size];
    if(nums1 == NULL){
        return nums2Size % 2 ? nums2[nums2Size / 2] : (nums2[nums2Size / 2] + nums2[nums2Size / 2 - 1]) / 2.0;
    }
    if(nums2 == NULL){
        return nums1Size % 2 ? nums1[nums1Size / 2] : (nums1[nums1Size / 2] + nums1[nums1Size / 2 - 1]) / 2.0;
    }
    for(int i = 0, index1 = 0, index2 = 0; index1 < nums1Size || index2 < nums2Size; ++i){
        if(index1 == nums1Size){
            all[index1 + index2] = nums2[index2];
            index2++;
        }
        else if(index2 == nums2Size){
            all[index1 + index2] = nums1[index1];
            index1++;
        }
        else if(nums1[index1] < nums2[index2]){
            all[index1 + index2] = nums1[index1];
            index1++;
        }
        else{
            all[index1 + index2] = nums2[index2];
            index2++;
        }
    }
    return (nums1Size + nums2Size) % 2 ? all[(nums1Size + nums2Size) / 2] : (all[(nums1Size + nums2Size) / 2] + all[(nums1Size + nums2Size) / 2 - 1]) / 2.0;
}
// c version 2

double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size) {
    int totalSize = nums1Size + nums2Size;
    if(totalSize % 2 == 0) {
        int m = findTargetNumber(nums1, nums2, totalSize/2, nums1Size, nums2Size);
        int n = findTargetNumber(nums1, nums2, totalSize/2+1, nums1Size, nums2Size);
        return ( m+n )/2.0;
        
    } else {
        return 1.0 * findTargetNumber(nums1, nums2, (totalSize+1)/2, nums1Size, nums2Size);
    }
}
int findTargetNumber(int* nums1, int *nums2, int target, int nums1Size,int nums2Size) {
    if(nums1Size == 0)
        return nums2[target-1];
    if(nums2Size == 0)
        return nums1[target-1]; 
    if(target == 1) {
        return *nums1>*nums2?*nums2:*nums1;
    }
    if(*nums1 < *nums2) {
        if(!*(nums1+1)) 
        return findTargetNumber(nums1, nums2, target-1, 0,nums2Size);
        return findTargetNumber(nums1+1, nums2, target-1, nums1Size-1, nums2Size);
    } else {    
        if(!*(nums2+1)) 
        return findTargetNumber(nums1, nums2, target-1, nums1Size,0);
        return findTargetNumber(nums1, nums2+1, target-1, nums1Size, nums2Size-1);
    }
}

//c version 3

double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size) {
    int all[(nums1Size + nums2Size) / 2 + 1];
    if(nums1 == NULL){
        return nums2Size % 2 ? nums2[nums2Size / 2] : (nums2[nums2Size / 2] + nums2[nums2Size / 2 - 1]) / 2.0;
    }
    if(nums2 == NULL){
        return nums1Size % 2 ? nums1[nums1Size / 2] : (nums1[nums1Size / 2] + nums1[nums1Size / 2 - 1]) / 2.0;
    }
    for(int i = 0, index1 = 0, index2 = 0; i < (nums1Size + nums2Size) / 2 + 1; ++i){
        if(index1 == nums1Size){
            all[index1 + index2] = nums2[index2];
            index2++;
        }
        else if(index2 == nums2Size){
            all[index1 + index2] = nums1[index1];
            index1++;
        }
        else if(nums1[index1] < nums2[index2]){
            all[index1 + index2] = nums1[index1];
            index1++;
        }
        else{
            all[index1 + index2] = nums2[index2];
            index2++;
        }
    }
    return (nums1Size + nums2Size) % 2 ? all[(nums1Size + nums2Size) / 2] : (all[(nums1Size + nums2Size) / 2] + all[(nums1Size + nums2Size) / 2 - 1]) / 2.0;
}
