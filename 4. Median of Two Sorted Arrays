There are two sorted arrays nums1 and nums2 of size m and n respectively.
Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).
You may assume nums1 and nums2 cannot be both empty.

Example 1:
nums1 = [1, 3]
nums2 = [2]

The median is 2.0

Example 2:
nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5
--------------------------------------------------------------
Use two cuts to separate two arrays. The sum of those two cuts must equal the mid point of the merge of those two arrays.
Then do binary search.
--------------------------------------------------------------

// c version 1 36ms
double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size) {
    int all[nums1Size + nums2Size];
    if(nums1 == NULL){
        return nums2Size % 2 ? nums2[nums2Size / 2] : (nums2[nums2Size / 2] + nums2[nums2Size / 2 - 1]) / 2.0;
    }
    if(nums2 == NULL){
        return nums1Size % 2 ? nums1[nums1Size / 2] : (nums1[nums1Size / 2] + nums1[nums1Size / 2 - 1]) / 2.0;
    }
    for(int i = 0, index1 = 0, index2 = 0; index1 < nums1Size || index2 < nums2Size; ++i){
        if(index1 == nums1Size){
            all[index1 + index2] = nums2[index2];
            index2++;
        }
        else if(index2 == nums2Size){
            all[index1 + index2] = nums1[index1];
            index1++;
        }
        else if(nums1[index1] < nums2[index2]){
            all[index1 + index2] = nums1[index1];
            index1++;
        }
        else{
            all[index1 + index2] = nums2[index2];
            index2++;
        }
    }
    return (nums1Size + nums2Size) % 2 ? all[(nums1Size + nums2Size) / 2] : (all[(nums1Size + nums2Size) / 2] + all[(nums1Size + nums2Size) / 2 - 1]) / 2.0;
}
// c version 2 24ms

double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size) {
    int totalSize = nums1Size + nums2Size;
    if(totalSize % 2 == 0) {
        int m = findTargetNumber(nums1, nums2, totalSize/2, nums1Size, nums2Size);
        int n = findTargetNumber(nums1, nums2, totalSize/2+1, nums1Size, nums2Size);
        return ( m+n )/2.0;
        
    } else {
        return 1.0 * findTargetNumber(nums1, nums2, (totalSize+1)/2, nums1Size, nums2Size);
    }
}
int findTargetNumber(int* nums1, int *nums2, int target, int nums1Size,int nums2Size) {
    if(nums1Size == 0)
        return nums2[target-1];
    if(nums2Size == 0)
        return nums1[target-1]; 
    if(target == 1) {
        return *nums1>*nums2?*nums2:*nums1;
    }
    if(*nums1 < *nums2) {
        if(!*(nums1+1)) 
        return findTargetNumber(nums1, nums2, target-1, 0,nums2Size);
        return findTargetNumber(nums1+1, nums2, target-1, nums1Size-1, nums2Size);
    } else {    
        if(!*(nums2+1)) 
        return findTargetNumber(nums1, nums2, target-1, nums1Size,0);
        return findTargetNumber(nums1, nums2+1, target-1, nums1Size, nums2Size-1);
    }
}

//c version 3 24ms

double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size) {
    int all[(nums1Size + nums2Size) / 2 + 1];
    if(nums1 == NULL){
        return nums2Size % 2 ? nums2[nums2Size / 2] : (nums2[nums2Size / 2] + nums2[nums2Size / 2 - 1]) / 2.0;
    }
    if(nums2 == NULL){
        return nums1Size % 2 ? nums1[nums1Size / 2] : (nums1[nums1Size / 2] + nums1[nums1Size / 2 - 1]) / 2.0;
    }
    for(int i = 0, index1 = 0, index2 = 0; i < (nums1Size + nums2Size) / 2 + 1; ++i){
        if(index1 == nums1Size){
            all[index1 + index2] = nums2[index2];
            index2++;
        }
        else if(index2 == nums2Size){
            all[index1 + index2] = nums1[index1];
            index1++;
        }
        else if(nums1[index1] < nums2[index2]){
            all[index1 + index2] = nums1[index1];
            index1++;
        }
        else{
            all[index1 + index2] = nums2[index2];
            index2++;
        }
    }
    return (nums1Size + nums2Size) % 2 ? all[(nums1Size + nums2Size) / 2] : (all[(nums1Size + nums2Size) / 2] + all[(nums1Size + nums2Size) / 2 - 1]) / 2.0;
}

// c++ version 1 32ms
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int nums1Size = nums1.size();
        int nums2Size = nums2.size();
        int all[(nums1Size + nums2Size) / 2 + 1];
        if(nums1Size == 0)
            return nums2Size % 2 ? nums2[nums2Size / 2] : (nums2[nums2Size / 2] + nums2[nums2Size / 2 - 1]) / 2.0;       
        if(nums2Size == 0)
            return nums1Size % 2 ? nums1[nums1Size / 2] : (nums1[nums1Size / 2] + nums1[nums1Size / 2 - 1]) / 2.0;
    
        for(int i = 0, index1 = 0, index2 = 0; i < (nums1Size + nums2Size) / 2 + 1; ++i){
            if(index1 == nums1Size)
                all[index1 + index2] = nums2[index2++];        
            else if(index2 == nums2Size)
                all[index1 + index2] = nums1[index1++];
            else if(nums1[index1] < nums2[index2])
                all[index1 + index2] = nums1[index1++];
            else
                all[index1 + index2] = nums2[index2++];
        }
    return (nums1Size + nums2Size) % 2 ? all[(nums1Size + nums2Size) / 2] : (all[(nums1Size + nums2Size) / 2] + all[(nums1Size + nums2Size) / 2 - 1]) / 2.0;
    }
};


// c++ version 2 16ms
static const auto speedup = [](){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    return nullptr;
}();


class Solution {
public:
   double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
    int N1 = nums1.size();
    int N2 = nums2.size();
    if (N1 < N2) return findMedianSortedArrays(nums2, nums1);	// Make sure A2 is the shorter one.
    
    int lo = 0, hi = N2 * 2;
    while (lo <= hi) {
        int mid2 = (lo + hi) / 2;   // Try Cut 2 
        int mid1 = N1 + N2 - mid2;  // Calculate Cut 1 accordingly
        
        double L1 = (mid1 == 0) ? INT_MIN : nums1[(mid1-1)/2];	// Get L1, R1, L2, R2 respectively
        double L2 = (mid2 == 0) ? INT_MIN : nums2[(mid2-1)/2];
        double R1 = (mid1 == N1 * 2) ? INT_MAX : nums1[(mid1)/2];
        double R2 = (mid2 == N2 * 2) ? INT_MAX : nums2[(mid2)/2];
        
        if (L1 > R2) lo = mid2 + 1;		// A1's lower half is too big; need to move C1 left (C2 right)
        else if (L2 > R1) hi = mid2 - 1;	// A2's lower half too big; need to move C2 left.
        else return (max(L1,L2) + min(R1, R2)) / 2;	// Otherwise, that's the right cut.
    }
    return -1;
} 
};

// java version 1 40ms
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int nums1Size = nums1.length, nums2Size = nums2.length;
        if(nums1 == null){
            
            if(nums2Size % 2 == 1)   return nums2[nums2Size / 2];
            else return (nums2[nums2Size / 2] + nums2[nums2Size / 2 - 1]) / 2.0;
        }
        if(nums2 == null){
            if(nums2Size % 2 == 1)   return nums1[nums1Size / 2];
            else return (nums1[nums1Size / 2] + nums1[nums1Size / 2 - 1]) / 2.0;
        }

        int[] all = new int[(nums1Size + nums2Size) / 2 + 1];
        for(int i = 0, index1 = 0, index2 = 0; i < (nums1Size + nums2Size) / 2 + 1; ++i){
            if(index1 == nums1Size){
                all[index1 + index2] = nums2[index2];
                index2++;
            }
            else if(index2 == nums2Size){
                all[index1 + index2] = nums1[index1];
                index1++;
            }
            else if(nums1[index1] < nums2[index2]){
                all[index1 + index2] = nums1[index1];
                index1++;
            }
            else{
                all[index1 + index2] = nums2[index2];
                index2++;
            }
        }
        if((nums1Size + nums2Size) % 2 == 1)
            return all[(nums1Size + nums2Size) / 2];
        else
            return (all[(nums1Size + nums2Size) / 2] + all[(nums1Size + nums2Size) / 2 - 1]) / 2.0;
    }
}

// java version 2
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {        
        int length1 = nums1.length;
        int length2 = nums2.length;
        /*
        保证 nums1.length<=nums2.length
        */
        if(length1>length2){
            int[] temp = nums1;
            nums1 = nums2;
            nums2 = temp;
            length1 = nums1.length;
            length2 = nums2.length;
        }
        
        if(length2==0)  return 0.0;
        if(length1==0){
            if(length2%2!=0)
                return nums2[length2/2]*1.0;
            else{
                return (nums2[length2/2-1]+nums2[length2/2])/2.0;
            }
            
            
        }
        
        /*
        i将长度的m的数组一份为二，i可以为0~m，m+1种取值，每种划分，两个子数组的长度一次为：i,m-i
        j将长度为n的数组一份为二，j可以取0~n，n+1种取值，每种划分，两个字数组长度一次为：j,n-j    （假定n>=m）
        
        中位数将数组整体一份为二，并且具有如下特点：中位数将数组划分为两个等长或者长度相差为1 
                i
        A[i-1]  /  A[i]
        B[j-1]  /  B[j]
                j
        上图的两个//分别代表i和j的切分位置
        并且有：A[i-1]<=B[j]   B[j-1]<=A[i]
        
        综上：当m+n为偶数时，左右两边数组长度相等：i+j = (m-i)+(n-j)  ->   i+j = (m+n)/2
              当m+n为奇数时，假设将多出的那个数划分到左侧,即左侧比右侧长度大一：i+j = (m-i)+（n-j）+1 ->i+j=（m+n+1)/2
              
              综上： i+j = (m+n+1)/2         (m<=n)
              注意到：当i>0时，有j<n;   当i<m时：j>0
              
              我们的目标是找到一个i，满足左边和右边长度相等或者长度相差1（只要满足j=(m+n+1)/2-i即可），另外有A[i-1]<=B[j]   B[j-1]<=A[i]
        */
        
        int i_min = 0;
        int i_max = length1;  //
        int aux = (length1+length2+1)/2;
        
        while(i_min<=i_max){
            int i = (i_min+i_max)/2;//i限定在i_minhe i_max之间，不会出现无效索引的情况，但是j就不一样，所以j要指向长度较长的数组，否则会数组越界
            int j = aux - i;        //如果i数组:[1,3]；j数组[3];第一次i=(0+2)/2=1；j=(2+1+1)/2=2,而此时j数组的长度为1,2下标越界，j-1=1下标也越界了
            if(i>0&&nums1[i-1]>nums2[j])//i>0即有j<n  i==0为边界情况，后面考虑
                i_max = i-1;//想办法减小A[i-1],增大B[j],
            else if(i<length1&&nums1[i]<nums2[j-1])//,i偏小，所以要增大i；i<m，同时有j>0
                i_min = i+1;//想办法增大A[i]
            else{
                //由于  中位数一定存在，到达边界和成功找到满足条件的i均是成功
                //边界情况 ： i==0  i==m   j==0  j==m  或者 已经满足A[i-1]<B[j] 以及 B[j-1]<A[i]
                
                //由之前知道，如果总的数组长度为奇数，左边部分比右边部分长度多一个，当然最后的中位数也就是左边最大值了
                
                //当length1+length2为奇数的时候，中位数就是左半部分数组的最大值，max_left；若数组总长度是偶数，中位数为：(max_left+max_right)/2
                //所以至少需要先找出max_left；至于max_right与总长度是奇数还是偶数有关
                
                //求解max_left
                int max_left = 0;
                if(i==0&&nums1[i]>=nums2[j-1])
                    max_left = nums2[j-1];
                else if(j==0&&nums1[i-1]<=nums2[j])
                    max_left = nums1[i-1];
                else
                    max_left = Math.max(nums1[i-1],nums2[j-1]);//nums1[i-1]>=nums2[j-1]?nums1[i-1]:nums2[j-1];
                
                if((length1+length2)%2!=0){//总长度为奇数，返回max_left
                    return max_left*1.0;
                }
               
                //当合并后数组长度为偶数时，中位数为：(max_left+max_right)/2
                int min_right = 0;
                if(i==length1)
                    min_right = nums2[j];
                else if(j==length2)
                    min_right = nums1[i];
                else
                    min_right = Math.min(nums1[i],nums2[j]);//nums1[i]<=nums2[j]?nums1[i]:nums2[j];
                
                return (max_left+min_right)/2.0;
                
            }
            
        }
        return 1.0;
        
    }
}

// python version 1 64ms
class Solution(object):
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
        nums1Size = len(nums1)
        nums2Size = len(nums2)     
        all = {}
        if nums1Size == 0:
            if nums2Size % 2 == 1:
                return  nums2[int(math.floor(nums2Size / 2))]
            else:
                return (nums2[int(math.floor(nums2Size / 2))] + nums2[int(math.floor(nums2Size / 2)) - 1]) / 2.0
        if nums2Size == 0:
            if nums1Size % 2 == 1:
                return  nums1[int(math.floor(nums1Size / 2))]
            else:
                return (nums1[nums1Size / 2] + nums1[(nums1Size / 2) - 1]) / 2.0        
        i, index1, index2 = 0, 0, 0
        while i < int(math.floor((nums1Size + nums2Size) / 2)) + 1:
            if index1 == nums1Size:
                all[index1 + index2] = nums2[index2]
                index2 += 1       
            elif index2 == nums2Size:
                all[index1 + index2] = nums1[index1]
                index1 += 1
            elif nums1[index1] < nums2[index2]:
                all[index1 + index2] = nums1[index1]
                index1 += 1      
            else:
                all[index1 + index2] = nums2[index2]
                index2 += 1
            i += 1
        if (nums1Size + nums2Size) % 2 == 1:
            return all[int(math.floor((nums1Size + nums2Size) / 2))]
        else:
            return (all[(nums1Size + nums2Size) / 2] + all[(nums1Size + nums2Size) / 2 - 1]) / 2.0
    
// python version 2 52ms
class Solution(object):
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
        l = sorted(nums1+nums2)
        size = len(l)
        return l[size/2] if size % 2 == 1 else (l[size/2-1]+l[size/2])/2. 
