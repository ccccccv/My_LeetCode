Given a 32-bit signed integer, reverse digits of an integer.

Example 1:
Input: 123
Output: 321

Example 2:
Input: -123
Output: -321

Example 3:
Input: 120
Output: 21

Note:
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer 
range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.
-----------------------------------------------------

// c version 1 12ms
int reverse(int x) {
    const int MAX = pow(2,31);
    if(x >= MAX || x <= -MAX)
        return 0;
    int result = 0;
    for(int i = 0; x != 0; ++i){
        result *= 10; 
        result += x % 10;
        x /= 10;
        if(x == 0)
            break;
          
        if(i == 8 && (result > MAX / 10 || result < -MAX / 10))
            return 0;
        else if((result == MAX / 10 && MAX % 10 - 1 < x) || (result == -MAX / 10 && -MAX % 10 > x))
            return 0;
    }
    return result;
}

// c++ version 1 24ms
class Solution {
public:
    int reverse(int x) {
        const int MAX = pow(2,31);
        if(x >= MAX || x <= -MAX)
            return 0;
        int result = 0;
        for(int i = 0; x != 0; ++i){
            result *= 10; 
            result += x % 10;
            x /= 10;
            if(x == 0)
                break;
          
            if(i == 8 && (result > MAX / 10 || result < -MAX / 10))
                return 0;
            else if((result == MAX / 10 && MAX % 10 - 1 < x) || (result == -MAX / 10 && -MAX % 10 > x))
                return 0;
        }
        return result;
    }
};

// c++ version 2 4ms
static auto io_sync_off = [](){
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    return nullptr;
}();
class Solution {
public:
    int reverse(int x) {
        
        long long val=0;
        //int i=1;
        while(x){
            val=10*val+x%10;
            x=x/10;
        }
        return (val>INT_MAX||val<INT_MIN)?0:val;
        
    }
};

// java version 1 22ms
class Solution {
    public int reverse(int x) {
        long val = 0;
        while(x != 0){
            val = val * 10 + x % 10;
            x = x / 10;
        }
        if(val > java.lang.Integer.MAX_VALUE || val < java.lang.Integer.MIN_VALUE)
            return 0;
        return (int)val;
    }
}

// python version 1 36ms
class Solution(object):
    def reverse(self, x):
        """
        :type x: int
        :rtype: int
        """
        s = cmp(x, 0)
        r = int(`s*x`[::-1])
        return s*r * (r < 2**31)

// python version 2 36ms
# Solution 1:
class Solution(object):
    def reverse(self, x):
        """
        :type x: int
        :rtype: int
        """
        INT_MAX = -1 + 2 ** 31
        INT_MIN = -2 ** 31
        reversed_num = 0
        neg = False
        
        if x < 0:
            neg = True
            x = -1 * x

        while x != 0:
            pop = x % 10
            x = x / 10
            if reversed_num > INT_MAX/10 or (reversed_num == INT_MAX / 10 and pop > 7):
                return 0
            if reversed_num < INT_MIN/10 or (reversed_num == INT_MIN / 10 and pop < -8):
                return 0
            reversed_num = reversed_num * 10 + pop
            
            
        return -1 * reversed_num if neg else reversed_num
        
// python version 3 32ms
class Solution:
    def reverse(self, x):
        """
        :type x: int
        :rtype: int
        """
        if x >= 0:
            sign = 1
        else:
            x *= -1
            sign = -1
        
        ans = 0
        mul = 1
        while x != 0:
            ans *= 10
            ans += x%10 
            x //= 10
        if ans > 2**31: 
            return 0
        
        return ans * sign
    
