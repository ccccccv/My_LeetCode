// c version 1 8ms
char* longestPalindrome(char* s) {
    int size = strlen(s);
    if(s[1] == '\0')
        return s;
    int center, left, right;
    int maxLen = 0, resultL = 0, resultR = 0;
    for(center = 1, left = 1, right = 1; center < size; ++center){
        left = center; right = center;
        while(left > 0 && s[right + 1] != '\0'){
            if(s[left - 1] == s[right + 1]){                               
                left--;
                right++;
            }
            else{
                break;
            }
        }
        if(maxLen < right - left + 1){
            resultL = left;
            resultR = right;
            maxLen = right - left + 1;
        }
    }
    for(center = 1, left = 0, right = 1; center < size; ++center){
        if(s[center - 1] == s[center]){
            left = center - 1; right = center;
            while(left > 0 && s[right + 1] != '\0'){
                if(s[left - 1] == s[right + 1]){
                    left--;
                    right++;
                }
                else
                    break;
            }
            if(maxLen < right - left + 1){
                resultL = left;
                resultR = right;
                maxLen = right - left + 1;
            }
        }
        else
            continue;
    }
    
    if(s[resultL] == NULL){
        char *nullptr = (char *) malloc(sizeof(char));
        nullptr[0] = '\0';
        return nullptr;
    }
    char *result = (char *) malloc(sizeof(char) * (maxLen + 1));
    result[maxLen] = '\0';
    for(int i = resultL,j = 0; i <= resultR; ++i,++j){
        result[j] = s[i];
    }
    return result;
}

// c version 2 0ms
char* longestPalindrome(char* s) {
    int N = strlen(s);
    if(s==NULL || N==0 || N==1) return s;
    N = 2*N+1;
    int L[N]; //LPS Length Array
    L[0] = 0;
    L[1] = 1;
    int CP = 1; //centerPosition 
    int CRP = 2; //centerRightPosition
    int i, iMirror; // CurRP, CurLP
	int diff = -1; // CRP - CurRP
	int maxLPSLength = 0;
	int maxLPSCenterPosition = 0;
	int start = -1;
    
    for(i = 2; i<N; i++){
        iMirror = 2*CP - i;
        L[i] = 0;
        diff = CRP - i;
	
        if(diff > 0) 
            L[i] = (L[iMirror] <= diff) ? L[iMirror] : diff;
        
        while( (i+L[i])<(N-1) && (i-L[i])>0 &&
                  ((i+L[i]+1)%2==0 || 
                   (s[(i+L[i]+1)/2] == s[(i-L[i]-1)/2])) ){
                L[i]++;
        }
        if(L[i] > maxLPSLength){
			maxLPSLength = L[i];
			maxLPSCenterPosition = i;
		}
		if (i + L[i] > CRP) {
			CP = i;
			CRP = i + L[i];
		}
    }
    start = (maxLPSCenterPosition - maxLPSLength)/2;
    char* result = (char*)malloc(maxLPSLength*sizeof(char)+1);
	for(i=0; i<maxLPSLength; i++)
		*(result+i) = *(s+i+start);
    *(result+i) = '\0';
    return result;
}

\\ c++ version 1 16ms
class Solution {
public:
    string longestPalindrome(string s) {
    int size = s.length();
    if(size == 0 || size == 1)
        return s;
    int center, left, right;
    int maxLen = 0, resultL = 0, resultR = 0;
    for(center = 1, left = 1, right = 1; center < size; ++center){
        left = center; right = center;
        while(left > 0 && s[right + 1] != '\0'){
            if(s[left - 1] == s[right + 1]){                               
                left--;
                right++;
            }
            else{
                break;
            }
        }
        if(maxLen < right - left + 1){
            resultL = left;
            resultR = right;
            maxLen = right - left + 1;
        }
    }
    for(center = 1, left = 0, right = 1; center < size; ++center){
        if(s[center - 1] == s[center]){
            left = center - 1; right = center;
            while(left > 0 && s[right + 1] != '\0'){
                if(s[left - 1] == s[right + 1]){
                    left--;
                    right++;
                }
                else
                    break;
            }
            if(maxLen < right - left + 1){
                resultL = left;
                resultR = right;
                maxLen = right - left + 1;
            }
        }
        else
            continue;
    }
    
    if(s[resultL] == NULL){
        char *result = new char[1];
        result[0] = '\0';
        return result;
    }
    char *result = new char [maxLen + 1];
    result[maxLen] = '\0';
    for(int i = resultL,j = 0; i <= resultR; ++i,++j){
        result[j] = s[i];
    }
    return result;
    }
};


// c++ version 2 0ms
class Solution {
public:
    string longestPalindrome(string s) {
        int maxLength = 0, start = 0, low, high, newLength,len=s.size();
        for (int i = 0; i < len;) {
            if (len - i <= maxLength / 2) break;
            low = i - 1;
            high = i + 1;
            while (high < len && s[high] == s[high - 1]) high++;
            i = high;
            while (low >= 0 && high < len && s[low] == s[high]) {--low; ++high;}
            newLength = high - low - 1;
            if (newLength > maxLength) {maxLength = newLength; start = low + 1;}
        }
        return s.substr(start, maxLength);
    }
};

static int x=[](){ std::ios::sync_with_stdio(false); cin.tie(NULL); return 0; }();

// c++ version 3 12ms
class Solution {
public:
    string longestPalindrome(string s) {
    int size = s.length();
    if(size == 0 || size == 1)
        return s;
    int center, left, right;
    int maxLen = 0, resultL = 0, resultR = 0;
    for(center = 1, left = 1, right = 1; center < size; ++center){
        if(size - center <= maxLen / 2) break;
        left = center; right = center;
        while(left > 0 && s[right + 1] != '\0'){
            if(s[left - 1] == s[right + 1]){                               
                left--;
                right++;
            }
            else{
                break;
            }
        }
        if(maxLen < right - left + 1){
            resultL = left;
            resultR = right;
            maxLen = right - left + 1;
        }
    }
    for(center = 1, left = 0, right = 1; center < size; ++center){
        if(size - center <= maxLen / 2) break;
        if(s[center - 1] == s[center]){
            left = center - 1; right = center;
            while(left > 0 && s[right + 1] != '\0'){
                if(s[left - 1] == s[right + 1]){
                    left--;
                    right++;
                }
                else
                    break;
            }
            if(maxLen < right - left + 1){
                resultL = left;
                resultR = right;
                maxLen = right - left + 1;
            }
        }
        else
            continue;
    }
    
    if(s[resultL] == NULL){
        char *result = new char[1];
        result[0] = '\0';
        return result;
    }
    char *result = new char [maxLen + 1];
    result[maxLen] = '\0';
    for(int i = resultL,j = 0; i <= resultR; ++i,++j){
        result[j] = s[i];
    }
    return result;
    }
};

// java version 1 40ms
class Solution {
    public String longestPalindrome(String s) {
        int low = 0, high = 0, maxLen = 0;
        int L = 0, H = 0;
        if(s.length() <= 0 || s.length() == 1){
            return s;
        }
        for(int i = 0; i < s.length(); ++i){
            if(s.length() - i <= maxLen / 2){
                break;
            }
            high = i; low = i;
            while(high + 1 < s.length() && s.charAt(high) == s.charAt(high + 1)){
                ++high;
            }
            while(low > 0 && high + 1 < s.length() && s.charAt(low - 1) == s.charAt(high + 1)){
                ++high;
                --low;
            }
            if(maxLen < high - low + 1){
                L = low;
                H = high;
                maxLen = high - low +1;
            }
        }
        return s.substring(L, H + 1);
    }
}

// java version 2 8ms
class Solution {
    int max = 0;
    int left = 0;
    char[] chars;
    public String longestPalindrome(String s) {
        if (s == null || s.length() == 0){
            return s;
        }
        chars = s.toCharArray();
        for (int i = 0; i < chars.length; i++){
            i = longestPalindrome(i);
        }
        return s.substring(left, left + max);
    }
    
    private int longestPalindrome(int index){
        int ll = index, rr = index;
        while (rr + 1 < chars.length && chars[rr] == chars[rr + 1]){
            rr++;
        }
        int temp = rr;
        while (ll - 1 >= 0 && rr + 1 < chars.length && chars[ll - 1] == chars[rr + 1]){
            ll--;
            rr++;
        }
        if (rr - ll  + 1 > max){
            max = rr - ll + 1;
            left = ll;
        }
        return temp;
    }
}

// python version 1 680ms
class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        low, high, maxLen, L, H, index = 0, 0, 0, 0, 0, 0
        li = list(s)
        if len(s) <= 1:
            return s
        while index < len(s):
            if len(s) - index <= maxLen / 2:
                break
            high, low = index, index
            while (high + 1) < len(s) and li[high] == li[high + 1]:
                high += 1
            while low > 0 and (high + 1) < len(s) and li[low - 1] == li[high + 1]:
                high += 1
                low -= 1
            if maxLen < high - low + 1:
                L, H, maxLen = low, high, high - low + 1
            index += 1
        return s[int(L) : int(H + 1)]
