Given a string, find the length of the longest substring without repeating characters.

Example 1:
Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", which the length is 3.

Example 2:
Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.

Example 3:
Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3. 
             Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
------------------------------------------------------------------------------------------

// c
int max(int a, int b) {
    int m = a > b? a : b;
    return m;
}
int lengthOfLongestSubstring(char* s) {
    int sIndex = 0; // start Index
    int eIndex = 0; // end Index
    int maxLen = 0; // max Length
    
    int last_seen[256] = {0}; // holds the index of where a give char in the string was last seen
    for (int i = 0; i < 256;  i++) {
        last_seen[i] = -1; 
    }
    
    while(s[eIndex] != '\0')
    {
        //if we have already seen the current char at a location between the current start index and end index
        if(last_seen[s[eIndex]] >= sIndex) {
            maxLen = max((eIndex - sIndex), maxLen);
            sIndex = last_seen[s[eIndex]] + 1; //update start index to point to the last know location of already seen char +1
        } 
        
        // update last_seen table to hold the latest location (index) of a char in s
        last_seen[s[eIndex]] = eIndex;
        eIndex++;
        
    }
    
    //To cover cases like "abc", "df"
    maxLen = max((eIndex - sIndex), maxLen);
    return maxLen;
}

// c++
class Solution {
public:
    int max(int a, int b){
        return a > b ? a : b;
    }
    int lengthOfLongestSubstring(string s) {
        int start = 0, end = 0, maxLen = 0;
        int map[256];
        for(int i = 0; i < 256; ++i)    map[i] = -1;
        
        while(s[end] != '\0'){
            if(map[s[end]] >= start){              
                maxLen = max(end - start, maxLen);
                start = map[s[end]] + 1;
            }
            
            map[s[end]] = end;
            end++;
        }
        maxLen = max(end - start, maxLen);
        return maxLen;
    }
};

// java
class Solution {
    public int lengthOfLongestSubstring(String s) {
        int[] chars = new int[128];
        for (int i = 0; i < chars.length; i++){
            chars[i] = -1;
        }
        int max = 0, start = 0;
        for (int i = 0; i < s.length(); i++){
            char c = s.charAt(i);
            if (chars[c - ' '] != -1){
                start = Math.max(start, chars[c - ' '] + 1);
            }
            chars[c - ' '] = i;
            max = Math.max(max, i-start+1);
        }
        return max;
    }
}

/*
    create array use <T>[] varName = new <T>[SIZE];
    find length
        array: array.length
        string: string.length()
        others: others.size();
    get one char of string: string.charAt(index);
    get maximum: Math.max(...,...);
*/

// python
class Solution:
    def lengthOfLongestSubstring(self, s):
   
        begin, end, maxLen, table = 0, 0, 0, {}
        if len(s) == 1:
            return 1
        for char in s:
            if char in table:            
                if maxLen < end - begin:
                    maxLen = end - begin
                if begin <= table[char]:
                    begin = table[char] + 1
            table[char] = end
            end += 1
        if maxLen < end - begin:
            maxLen = end - begin
        return maxLen
